import sys
import os
import datetime
import logging

def main():

	if len(sys.argv) < 4:
		print "Too few arguments!"
		print "Usage: ", sys.argv[0], "<opseq file directory> <log file directory> <onehot file directory>"
		return

	opseq_file_directory = sys.argv[1]
	print "Reading opseqs from : ", opseq_file_directory

	log_file_directory = sys.argv[2]
	print "Logging into : ", log_file_directory

	onehot_file_directory = sys.argv[3]
	print "One hot folder : ", onehot_file_directory

	logging.basicConfig(filename=log_file_directory+'/onehot.log',level=logging.DEBUG)

	opseqs=[]

	for name in os.listdir(opseq_file_directory):
		if os.path.isfile(os.path.join(opseq_file_directory, name)):
			opseqs.append(name)

	logging.info('Total opseqs to be processed {0}'.format(len(opseqs)))
	print "Total opseqs to be processed : ", len(opseqs)

	num_local = 0
	before = datetime.datetime.now()
	logging.info('Starting at: {0}'.format(before))
	print "Starting at: {0}",before

	for opseq_hash in opseqs:
		opseq_file_location = os.path.join(opseq_file_directory, opseq_hash)
		num_local += 1
		logging.info('Processing opseq: {0} opseq #: {1}'.format(opseq_file_location,num_local))
		print "opseq #: ", num_local
		print "opseq location: ", opseq_file_location

		onehot_location = os.path.join(onehot_file_directory, opseq_hash + ".onehot")
		result = generate_onehot(onehot_location, opseq_file_location)

		if result:
			print "onehot file for opseq #",num_local," is created"
			logging.info('onehot file for apk # {0} is created'.format(num_local))
		else:
			logging.error('onehot file creation was not successful')
			print "onehot file creation was not successful"

	after = datetime.datetime.now()
	print "Finished by: {0} ", after
	logging.info('Total time taken: {0}'.format(after-before))
	print "Total time taken : ", after-before

def generate_onehot(onehot_location, opseq_file_location):

	onehot_codes = {}
	with open("DalvikOneHot.txt") as fop:
		for line in fop:
			(key, val) = line.split('-')
			onehot_codes[key] = val
	try:
		reader = None
		with open(opseq_file_location,mode="r") as opseqFile:
			reader = "".join(line.strip() for line in opseqFile)
		with open(onehot_location,"a") as onehotFile:
			for i in range(0,len(reader),2):
				onehotFile.write(onehot_codes[reader[i:i+2]])
		onehotFile.close()
		return True
	except FileException:
		print "FileException on processing"
		logging.error("FileException on processing opseq {0}".format(opseq_file_location))
		pass
	return False

class FileException(Exception):
	def __init__(self, command):
		self.command = command

	def __str__(self):
		return repr(self.command)

if __name__ == '__main__':
	main()